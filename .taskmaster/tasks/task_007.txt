# Task ID: 7
# Title: Develop `applyTheme` MCP Tool
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Implement a tool for applying theme customizations, primarily by updating CSS variables in the project's stylesheet.
# Details:
Register a tool named `applyTheme`. The handler will accept theme properties like primary color, font, etc. It will read `css/style.css` and replace predefined CSS variable values (e.g., `--primary-color: #...;`).

# Test Strategy:
Create a landing page. Call the `applyTheme` tool with new color values. Open the generated `index.html` in a browser and inspect the `style.css` to confirm the CSS variables have been updated.

# Subtasks:
## 1. Register `applyTheme` Tool and Define Handler Signature [pending]
### Dependencies: None
### Description: Create the basic scaffolding for the `applyTheme` tool by registering it with the Master Control Program (MCP) and defining its handler function with the expected arguments.
### Details:
Create a new tool file, e.g., `tools/applyTheme.js`. Add the tool's definition to the MCP's tool registry. The handler function should be a stub that accepts a theme object containing properties like `primaryColor`, `fontFamily`, etc., and the `projectPath`.

## 2. Implement CSS File Reading Logic [pending]
### Dependencies: 7.1
### Description: Develop the functionality to locate and read the contents of the `style.css` file from the specified project directory.
### Details:
Create a utility function within the tool's file that takes a project path, constructs the full path to `css/style.css`, and reads its entire content into a string. Implement error handling for cases where the file or directory does not exist.

## 3. Develop CSS Variable Replacement Logic [pending]
### Dependencies: 7.2
### Description: Create a pure function that takes the CSS content as a string and a theme object, then returns a new string with the CSS variable values updated.
### Details:
The function will use regular expressions to find and replace the values of predefined CSS variables (e.g., `--primary-color`, `--font-family`) within the `:root` selector block. It must be robust enough to handle different formatting and existing values without altering the rest of the file.

## 4. Integrate Logic and Implement File Write Operation [pending]
### Dependencies: 7.3
### Description: Combine the file reading and variable replacement logic into the main tool handler and implement the functionality to write the modified CSS content back to the file system.
### Details:
Flesh out the `applyTheme` handler. It will call the file reader (Subtask 7.2), pass the content and theme arguments to the replacer function (Subtask 7.3), and then use Node.js `fs` module to overwrite the original `css/style.css` with the updated content.

## 5. Create and Execute End-to-End Test [pending]
### Dependencies: 7.4
### Description: Perform a full, end-to-end test of the `applyTheme` tool on a project generated by the `createLandingPage` tool to validate its real-world functionality.
### Details:
As per the parent task's test strategy, first use the `createLandingPage` tool to generate a complete landing page project. Then, execute the `applyTheme` tool, targeting the newly created project with a new set of colors. Finally, inspect the resulting `css/style.css` to confirm the variables have been correctly updated.

